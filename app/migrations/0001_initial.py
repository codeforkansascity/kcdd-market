# Generated by Django 4.2.23 on 2025-08-13 16:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('cbo', 'Community-Based Organization'), ('donor', 'Donor')], default='donor', max_length=10)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('is_vetted', models.BooleanField(default=False)),
                ('vetting_note', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CauseArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IdentityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Identity categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('website', models.URLField(blank=True)),
                ('mission', models.TextField(help_text='Organization mission/description')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('zipcode', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d{5}(-\\d{4})?$', 'Enter a valid ZIP code')])),
                ('ein', models.CharField(blank=True, help_text='Tax ID in format: 12-3456789', max_length=12, validators=[django.core.validators.RegexValidator('^\\d{2}-\\d{7}$', 'Enter EIN in format: 12-3456789')])),
                ('logo', models.ImageField(blank=True, null=True, upload_to='org_logos/')),
                ('logo_emoji', models.CharField(blank=True, help_text='Emoji as fallback logo', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cause_areas', models.ManyToManyField(blank=True, to='app.causearea')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organization', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(help_text='What is needed and why?')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Dollar amount requested', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('urgency', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('zipcode', models.CharField(help_text='ZIP code where assistance is needed', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('claimed', 'Claimed'), ('fulfilled', 'Fulfilled')], default='open', max_length=10)),
                ('donor_note', models.TextField(blank=True, help_text='Note from donor about fulfillment plan')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('claimed_at', models.DateTimeField(blank=True, null=True)),
                ('fulfilled_at', models.DateTimeField(blank=True, null=True)),
                ('cause_area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.causearea')),
                ('donor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='claimed_requests', to=settings.AUTH_USER_MODEL)),
                ('identity_categories', models.ManyToManyField(blank=True, help_text='Recipient identity tags', to='app.identitycategory')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='app.organization')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RequestHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('created', 'Request Created'), ('claimed', 'Request Claimed'), ('fulfilled', 'Request Fulfilled'), ('updated', 'Request Updated'), ('note_added', 'Note Added')], max_length=20)),
                ('description', models.TextField(help_text='Description of the action taken')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='app.request')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Request histories',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FulfillmentRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fulfillment_type', models.CharField(choices=[('monetary', 'Monetary'), ('device', 'Device')], max_length=10)),
                ('device_condition', models.CharField(blank=True, choices=[('new', 'New'), ('refurbished', 'Refurbished'), ('used_good', 'Used - Good')], max_length=15)),
                ('donor_satisfied', models.BooleanField(default=True, help_text='Was donor satisfied with the process?')),
                ('cbo_satisfied', models.BooleanField(default=True, help_text='Was CBO satisfied with the process?')),
                ('donor_notes', models.TextField(blank=True, help_text='Donor feedback and notes')),
                ('cbo_notes', models.TextField(blank=True, help_text='CBO feedback and notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fulfillment', to='app.request')),
            ],
        ),
        migrations.CreateModel(
            name='DonorProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Individual or organization name', max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('max_per_request', models.DecimalField(decimal_places=2, default=0, help_text='Maximum amount willing to give per request', max_digits=10)),
                ('service_area_zipcode', models.CharField(blank=True, help_text='Preferred geographic area to serve', max_length=10, validators=[django.core.validators.RegexValidator('^\\d{5}(-\\d{4})?$', 'Enter a valid ZIP code')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cause_areas', models.ManyToManyField(blank=True, to='app.causearea')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='donor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
